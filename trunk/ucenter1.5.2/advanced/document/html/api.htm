<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>UCenter interface development manual - API Interface</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" href="images/style.css" type="text/css" media="all" />
<meta content="Comsenz Inc." name="Copyright" />
<script type="text/javascript" src="javascript/common.js"></script>
</head>
<body>
<script type="text/javascript" src="javascript/header.js"></script>

<div class="mainmsg">
The following set of documents and sample code, PHP programs are an example.
<br /><br />
UCenter the API interface file should be stored at the application root directory
"api/" directory, and file name can be customized, the default is uc.php,
the "api/uc.php".
File structure can be divided into four parts,
contains 12 interfaces the project.
Part 1 for the constant definitions,
Part 2 to inform the judge and the initialization method input parameters,
Part 3 class code for the interface,
Part 4 for the function definition.
</div>

<h3>1. Constant definition</h3>

<div class="submsg">

<div class="code"><pre>

define('UC_CLIENT_VERSION', '1.5.2');	//note UCenter Version Identification
define('UC_CLIENT_RELEASE', '20101001');

define('API_DELETEUSER', 1);		//note user delete API
define('API_RENAMEUSER', 1);		//note rename user API
define('API_GETTAG', 1);			//note get tag API
define('API_SYNLOGIN', 1);			//note synchronous login API
define('API_SYNLOGOUT', 1);			//note synchronous logout API
define('API_UPDATEPW', 1);			//note change user password API
define('API_UPDATEBADWORDS', 1);	//note update bad words API
define('API_UPDATEHOSTS', 1);		//note update dns hosts cache API
define('API_UPDATEAPPS', 1);		//note update application list API
define('API_UPDATECLIENT', 1);		//note update client cache API
define('API_UPDATECREDIT', 1);		//note update user points API
define('API_GETCREDITSETTINGS', 1);	//note get UCenter points settings API
define('API_GETCREDIT', 1);			//note get users points API
define('API_UPDATECREDITSETTINGS', 1);	//note update the application settings for user points

define('API_RETURN_SUCCEED', '1');
define('API_RETURN_FAILED', '-1');
define('API_RETURN_FORBIDDEN', '-2');

</pre></div>

Constant definition section defines the interfaces used by the switch 14 interfaces the project settings, "1" to open "0" is off. If enabled, then the code to run after the return API_RETURN_SUCCEED, otherwise API_RETURN_FORBIDDEN. Interface to fail is returned API_RETURN_FAILED.

<br />
</div>

<h3>2. Notify the judge and the initial input parameters means</h3>

<div class="submsg">

<div class="code"><pre>

if(!defined('IN_UC')) {

	error_reporting(0);
	set_magic_quotes_runtime(0);

	define('DISCUZ_ROOT', substr(dirname(__FILE__), 0, -3));
	defined('MAGIC_QUOTES_GPC') || define('MAGIC_QUOTES_GPC', get_magic_quotes_gpc());
	require_once DISCUZ_ROOT.'./config.inc.php';

	$_DCACHE = $get = $post = array();

	$code = @$_GET['code'];
	parse_str(_authcode($code, 'DECODE', UC_KEY), $get);
	if(MAGIC_QUOTES_GPC) {
		$get = _stripslashes($get);
	}

	$timestamp = time();
	if($timestamp - $get['time'] > 3600) {
		exit('Authracation has expiried');
	}
	if(empty($get)) {
		exit('Invalid Request');
	}
	$action = $get['action'];

	require_once DISCUZ_ROOT.'./uc_client/lib/xml.class.php';
	$post = xml_unserialize(file_get_contents('php://input'));

	if(in_array($get['action'], array('test', 'deleteuser', 'renameuser', 'gettag', 'synlogin', 'synlogout', 'updatepw', 'updatebadwords', 'updatehosts', 'updateapps', 'updateclient', 'updatecredit', 'getcreditsettings', 'updatecreditsettings'))) {
		require_once DISCUZ_ROOT.'./include/db_'.$database.'.class.php';
		$GLOBALS['db'] = new dbstuff;
		$GLOBALS['db']->connect($dbhost, $dbuser, $dbpw, $dbname, $pconnect, true, $dbcharset);
		$GLOBALS['tablepre'] = $tablepre;
		unset($dbhost, $dbuser, $dbpw, $dbname, $pconnect);
		$uc_note = new uc_note();
		exit($uc_note->$get['action']($get, $post));
	} else {
		exit(API_RETURN_FAILED);
	}

} else {

	define('DISCUZ_ROOT', $app['extra']['apppath']);
	require_once DISCUZ_ROOT.'./config.inc.php';
	require_once DISCUZ_ROOT.'./include/db_'.$database.'.class.php';
	$GLOBALS['db'] = new dbstuff;
	$GLOBALS['db']->connect($dbhost, $dbuser, $dbpw, $dbname, $pconnect, true, $dbcharset);
	$GLOBALS['tablepre'] = $tablepre;
	unset($dbhost, $dbuser, $dbpw, $dbname, $pconnect);
}

</pre></div>

Through constant IN_UC to determine HTTP interface file access by remote or direct way calling included

</div>

<h3>3. Interface code</h3>

<div class="submsg">

Interface class name uc_note, interface name such a way as, uc_note general code structure is as follows:

<div class="code"><pre>
class uc_note {

	var $dbconfig = '';
	//var $db = '';
	var $appdir = '';

	function _serialize($arr, $htmlon = 0) {
		if(!function_exists('xml_serialize')) {
			include_once DISCUZ_ROOT.'./uc_client/lib/xml.class.php';
		}
		return xml_serialize($arr, $htmlon);
	}

	function uc_note() {
		$this->appdir = substr(dirname(__FILE__), 0, -3);
		$this->dbconfig = $this->appdir.'./config.inc.php';
	}

	function test($get, $post) {
		return API_RETURN_SUCCEED;
	}

	function deleteuser($get, $post) {
		/*Code omitted*/
		return API_RETURN_SUCCEED;
	}
	
	/* More Interface Project */

}
</pre></div>

Specific code can refer to Discuz7.0.0/api/uc.php

</div>

<h4>test</h4>
<div class="submsg">

This interface for the only test the connection. When the test was launched UCenter interface request, if successful, get to the interface returned API_RETURN_SUCCEED value and application of communications, said UCenter normal.

</div>

<h4>deleteuser</h4>
<div class="submsg">

When UCenter delete a user, the interface will be launched deleteuser request to all applications to remove the corresponding user.

<br />
Input parameters on the $get['ids'], the value is a comma-separated user ID.
If successful then delete the output API_RETURN_SUCCEED.

<br />

<h6><a href="###" class="spread" onclick="collapse(this, 's1')">deleteuser Interface Example (PHP)</a></h6>

<div class="code" id="s1" style="display: none"><pre>
$query = $db->query("DELETE FROM {$tablepre}members WHERE uid IN ($get[ids])");
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>renameuser</h4>
<div class="submsg">

When UCenter change a user's user name, the interface will be launched renameuser request, notify all applications renamed. <br />
Input parameter $get['uid'] means that the user ID, $get['oldusername'] that the old user name, $get['newusername'] that the new user name. If the modification is successful, the output API_RETURN_SUCCEED. <br />

<h6><a href="###" class="spread" onclick="collapse(this, 's13')">renameuser Interface Example (PHP)</a></h6>
<div class="code" id="s13" style="display: none"><pre>
$uid = $get['uid'];
$usernamenew = $get['newusername'];

$db->query("UPDATE {$tablepre}members SET username='$usernamenew' WHERE uid='$uid'");
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>updatepw</h4>

<div class="submsg">

When the user changes the user password, this interface to receive a new password sent UCenter. <br />
Input parameter $get['username'] that the user name, $get['password'] that the new password. If the modification is successful, the output API_RETURN_SUCCEED. <br />


<h6><a href="###" class="spread" onclick="collapse(this, 's5')">updatepw Interface Example (PHP)</a></h6>
<div class="code" id="s5" style="display: none"><pre>
$username = $get['username'];
$password = md5($get['password']);
$db->query("UPDATE members SET password='$password' WHERE username='$username'");
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>gettag</h4>
<div class="submsg">

If the application exists tag feature, you can put the application through this interface label data transfer to the UCenter. <br />

Input parameters on the $get['id'], the value of the label name. The output of the array and subject to uc_serialize treatment. <br />

<table border="0" cellspacing="0" cellpadding="0" class="msgtable">
  <tbody>
    <tr>
      <th style="width:150px"><i>integer</i> [0]</th>
      <td>Tag name</td>
    </tr>
	<tr>
      <th style="width:150px"><i>array</i> [1]</th>
      <td>
		Tag data
		<table border="0" cellspacing="0" cellpadding="0" class="msgtable">
		  <tbody>
		    <tr>
              <th style="width:150px"><i>mixed</i> ['<u>xxx</u>']</th>
              <td>Customize</th>
            </tr>
		  </tbody>
		</table>
        Multiple array of custom items, the index name any, with return to UCenter. In order to ensure the sharing of data between applications, you need to "Application Management" and "label single display template" and "label template tag that" set the template and instructions. Template "(xxx)" said the index of tag data, representing the corresponding data. Such as extended data in the template "(image)" will show "['image']" array to the contents.


	</td></tr>
</table>

<h6><a href="###" class="spread" onclick="collapse(this, 's2')">gettag Interface Example (PHP)</a></h6>

<div class="code" id="s2" style="display: none"><pre>
$query = $db->query("SELECT * FROM threadtags WHERE tagname='$get[id]' ORDER BY dateline DESC LIMIT 10");
$threadlist = array();
while($data = $db->fetch_array($query)) {
	$threadlist[] = array(
		'name' => $data['subject'],
		'uid' => $data['authorid'],
		'username' => $data['author'],
		'dateline' => $data['dateline'],
		'url' => 'http://www.yourwebsite.com/thread.php?id='.$data['id'],
		'image' => ''http://www.yourwebsite.com/threadimage.php?id='.$data['id'],
		);
	}
}

$return = array($name, $threadlist);
echo uc_serialize($return, 1);
</pre></div>
</div>

<h4>synlogin</h4>
<div class="submsg">
If the application needs and other applications for synchronization log, this part of the code is responsible for marking the specified user's login status. <br />

Input parameters on the $get['uid'], the value of the user ID. This interface for the notification interface, not output. Need to use synchronization log <a href="http://www.w3.org/P3P/" target="_blank"> P3P standard </ a>. <br />


<h6><a href="###" class="spread" onclick="collapse(this, 's3')">synlogin Interface Example (PHP)</a></h6>
<div class="code" id="s3" style="display: none"><pre>
$query = $db->query("SELECT uid, username FROM members WHERE uid='$get[uid]'");
if($member = $db->fetch_array($query)) {
	header('P3P: CP="CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR"');
	dsetcookie('Example_auth', authcode($member['uid']."\t".$member['username'], 'ENCODE'), 86400 * 365);
}
</pre></div>
</div>

<h4>synlogout</h4>
<div class="submsg">
If the application needs and other applications for synchronization log out, this part of the code responsible for revocation of the user's login state. <br />
This interface for the notification interface, no input parameters and output. Sync out of need to use
<a href="http://www.w3.org/P3P/" target="_blank">P3P Standard</a>.<br />

<h6><a href="###" class="spread" onclick="collapse(this, 's4')">synlogout Interface Example (PHP)</a></h6>
<div class="code" id="s4" style="display: none"><pre>
header('P3P: CP="CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR"');
dsetcookie('Example_auth', '', -86400 * 365);
</pre></div>
</div>

<h4>updatebadwords</h4>
<div class="submsg">
When UCenter words filter settings changes, this interface is responsible for informing all the words after the application update the content filter settings. <br />
Set the content using POST method to submit to the interface. Interface operation is completed the output API_RETURN_SUCCEED. <br />

<h6><a href="###" class="spread" onclick="collapse(this, 's6')">updatebadwords Interface Example (PHP)</a></h6>
<div class="code" id="s6" style="display: none"><pre>
$post = uc_unserialize(file_get_contents('php://input'));
$cachefile = DISCUZ_ROOT.'./uc_client/data/cache/badwords.php';
$fp = fopen($cachefile, 'w');
$s = "&lt;?php\r\n";
$s .= '$_CACHE[\'badwords\'] = '.var_export($post, TRUE).";\r\n";
fwrite($fp, $s);
fclose($fp);
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>updatehosts</h4>
<div class="submsg">
When UCenter the domain name resolution settings changes, this interface to all applications for the domain name resolution settings updated content. <br />
Set the content using POST method to submit to the interface. Interface operation is completed the output API_RETURN_SUCCEED. <br />

<h6><a href="###" class="spread" onclick="collapse(this, 's7')">updatehosts Interface Example (PHP)</a></h6>
<div class="code" id="s7" style="display: none"><pre>
$post = uc_unserialize(file_get_contents('php://input'));
$cachefile = DISCUZ_ROOT.'./uc_client/data/cache/hosts.php';
$fp = fopen($cachefile, 'w');
$s = "&lt;?php\r\n";
$s .= '$_CACHE[\'hosts\'] = '.var_export($post, TRUE).";\r\n";
fwrite($fp, $s);
fclose($fp);
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>updateapps</h4>
<div class="submsg">
When an application UCenter list changes, this interface is responsible for notifying all applications updated list of applications. <br />
Set the content using POST method to submit to the interface. Interface operation is completed the output API_RETURN_SUCCEED. <br />

<h6><a href="###" class="spread" onclick="collapse(this, 's8')">updateapps Interface Example (PHP)</a></h6>
<div class="code" id="s8" style="display: none"><pre>
$post = uc_unserialize(file_get_contents('php://input'));
$cachefile = DISCUZ_ROOT.'./uc_client/data/cache/apps.php';
$fp = fopen($cachefile, 'w');
$s = "&lt;?php\r\n";
$s .= '$_CACHE[\'apps\'] = '.var_export($post, TRUE).";\r\n";
fwrite($fp, $s);
fclose($fp);
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>updateclient</h4>
<div class="submsg">
When UCenter basic settings changes, this interface to all applications for the basic settings updated content. <br />
Set the content using POST method to submit to the interface. Interface operation is completed the output API_RETURN_SUCCEED. <br />
<h6><a href="###" class="spread" onclick="collapse(this, 's9')">updateclient Interface Example (PHP)</a></h6>
<div class="code" id="s9" style="display: none"><pre>
$post = uc_unserialize(file_get_contents('php://input'));
$cachefile = DISCUZ_ROOT.'./uc_client/data/cache/setting.php';
$fp = fopen($cachefile, 'w');
$s = "&lt;?php\r\n";
$s .= '$_CACHE[\'setting\'] = '.var_export($post, TRUE).";\r\n";
fwrite($fp, $s);
fclose($fp);
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>updatecredit</h4>
<div class="submsg">
When an application requests the implementation of the interface exchange integral function uc_credit_exchange_request () later, this interface has been converted for the purpose of notice required to modify the user application integral value. <br />
Input parameter $get['credit'] that integral number, $get['amount'] that the increase or decrease the value of integration, $get['uid'] that the user ID. <br />

<h6><a href="###" class="spread" onclick="collapse(this, 's10')">updatecredit Interface Example (PHP)</a></h6>
<div class="code" id="s10" style="display: none"><pre>
$credit = intval($get['credit']);
$amount = intval($get['amount']);
$uid = intval($get['uid']);

$db->query("UPDATE members SET extcredits$credit=extcredits$credit+'$amount' WHERE uid='$uid'");
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>getcreditsettings</h4>
<div class="submsg">
This interface is responsible for application integration settings passed to the UCenter, for UCenter redeem settings in use. <br />

This interface without input parameters. The output of the array and subject to uc_serialize treatment. <br />
Array of single output structure:

<table border="0" cellspacing="0" cellpadding="0" class="msgtable">
	<tbody>
	<tr>
		<th colspan="2">1 KEY</th>
		<th colspan="2">2 KEY</th>
	</tr>
	<tr>
		<th style="width:100px" rowspan="2"><i>array</i> [n]</th>
		<td style="width:100px" rowspan="2">Integral number</td>
		<th style="width:100px"><i>string</i> [0]</th>
                <td>Integration Name</td>
	</tr>
	<tr>
		<th style="width:100px"><i>string</i> [1]</th>
                <td>Integral unit</td>
	</tr>
	</tbody>
</table>

Such as:

<div class="blockcode">
	array(<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'1' => array('Prestige', ''),<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'2' => array('Money', 'gold'),<br />
	)<br />
</div>

<h6><a href="###" class="spread" onclick="collapse(this, 's11')">getcreditsettings Interface Example (PHP)</a></h6>
<div class="code" id="s11" style="display: none"><pre>
$credits = array();
foreach($_DCACHE['settings']['extcredits'] as $id => $extcredits) {
	$credits[$id] = array($extcredits['title'], $extcredits['unit']);
}
echo uc_serialize($credits);
</pre></div>
</div>

<h4>updatecreditsettings</h4>
<div class="submsg">

This interface is responsible for receiving UCenter redeem the parameters set. <br />
Input parameters on the $get['credit'], the value of the array to set the parameters. Interface operation is completed the output API_RETURN_SUCCEED. <br />
Input array of single structure:

<table border="0" cellspacing="0" cellpadding="0" class="msgtable">
	<tbody>
	<tr>
		<th colspan="2">1 KEY</th>
		<th colspan="2">2 KEY</th>
	</tr>
	<tr>
		<th style="width:100px" rowspan="6"><i>array</i> [appid]</th>
		<td style="width:150px" rowspan="6">Application ID</td>
		<th style="width:150px"><i>integer</i> ['appiddesc']</th>
                <td>Redeem the target application ID</th>
	</tr>
	<tr>
		<th style="width:150px"><i>integer</i> ['creditdesc']</th>
                <td>Integral number exchange aim points</th>
	</tr>
	<tr>
		<th style="width:150px"><i>integer</i> ['creditsrc']</th>
                <td>Exchange integral number of source points</th>
	</tr>
	<tr>
		<th style="width:150px"><i>string</i> ['title']</th>
                <td>Points Name</th>
	</tr>
	<tr>
		<th style="width:150px"><i>string</i> ['unit']</th>
                <td>Integral unit</th>
	</tr>
	<tr>
		<th style="width:150px"><i>integer</i> ['ratio']</th>
                <td>Points exchange rate</th>
	</tr>
	</tbody>
</table>

Such as:

<div class="blockcode">
	array(<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'1' => array(<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'appiddesc' => 2,<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'creditdesc' => 1,<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'creditsrc' => 1,<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'title' => 'Money',<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'unit' => 'Points',<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'ratio' => 2,<br />
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),<br />
	)<br />
</div>

<h6><a href="###" class="spread" onclick="collapse(this, 's12')">updatecreditsettings Interface Example (PHP)</a></h6>
<div class="code" id="s12" style="display: none"><pre>
$outextcredits = array();
foreach($get['credit'] as $appid => $credititems) {
	if($appid == UC_APPID) {
		foreach($credititems as $value) {
			$outextcredits[$value['appiddesc'].'|'.$value['creditdesc']] = array(
				'creditsrc' => $value['creditsrc'],
				'title' => $value['title'],
				'unit' => $value['unit'],
				'ratio' => $value['ratio']
			);
		}
	}
}

$db->query("REPLACE INTO cdb_settings (variable, value) VALUES ('outextcredits', '".addslashes(serialize($outextcredits))."');", 'UNBUFFERED');
exit(API_RETURN_SUCCEED);
</pre></div>
</div>

<h4>getcredit</h4>
<div class="submsg">
This interface is used to specify the application passes the user's points UCenter. <br />
Input parameter $get['uid'] for the user ID, $get['credit'] for the integral number. Interface operation is completed the output integral value. <br />


<h6><a href="###" class="spread" onclick="collapse(this, 's14')">getcredit Interface Example (PHP)</a></h6>
<div class="code" id="s14" style="display: none"><pre>
$uid = intval($get['uid']);
$credit = intval($get['credit']);
echo $db->result_first("SELECT extcredits$credit FROM members WHERE uid='$uid'");
</pre></div>
</div>

<h3>4. Function definition</h3>

<div class="submsg">

Interface function must contain the following function, or not correctly passed over on the UCenter to decode the data.

<div class="code"><pre>
function authcode($string, $operation = 'DECODE', $key = '', $expiry = 0) {

	$ckey_length = 4;

	$key = md5($key ? $key : UC_KEY);
	$keya = md5(substr($key, 0, 16));
	$keyb = md5(substr($key, 16, 16));
	$keyc = $ckey_length ? ($operation == 'DECODE' ? substr($string, 0, $ckey_length): substr(md5(microtime()), -$ckey_length)) : '';

	$cryptkey = $keya.md5($keya.$keyc);
	$key_length = strlen($cryptkey);

	$string = $operation == 'DECODE' ? base64_decode(substr($string, $ckey_length)) : sprintf('%010d', $expiry ? $expiry + time() : 0).substr(md5($string.$keyb), 0, 16).$string;
	$string_length = strlen($string);

	$result = '';
	$box = range(0, 255);

	$rndkey = array();
	for($i = 0; $i <= 255; $i++) {
		$rndkey[$i] = ord($cryptkey[$i % $key_length]);
	}

	for($j = $i = 0; $i < 256; $i++) {
		$j = ($j + $box[$i] + $rndkey[$i]) % 256;
		$tmp = $box[$i];
		$box[$i] = $box[$j];
		$box[$j] = $tmp;
	}

	for($a = $j = $i = 0; $i < $string_length; $i++) {
		$a = ($a + 1) % 256;
		$j = ($j + $box[$a]) % 256;
		$tmp = $box[$a];
		$box[$a] = $box[$j];
		$box[$j] = $tmp;
		$result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256]));
	}

	if($operation == 'DECODE') {
		if((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() > 0) && substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16)) {
			return substr($result, 26);
		} else {
			return '';
		}
	} else {
		return $keyc.str_replace('=', '', base64_encode($result));
	}

}

function uc_serialize($arr, $htmlon = 0) {
	include_once UC_CLIENT_ROOT.'./lib/xml.class.php';
	return xml_serialize($arr, $htmlon);
}

function uc_unserialize($s) {
	include_once UC_CLIENT_ROOT.'./lib/xml.class.php';
	return xml_unserialize($s);
}
</pre></div>

</div>

<script type="text/javascript" src="javascript/footer.js"></script>
</body>
</html>